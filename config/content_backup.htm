<h1>About</h1>
<p>倉儲:<a href="https://github.com/mdecd2023/2a-pj1ag7">https://github.com/mdecd2023/2a-pj1ag7</a></p>
<p>網頁: <a href="https://mdecd2023.github.io/2a-pj1ag7/">https://mdecd2023.github.io/2a-pj1ag7/</a></p>
<p></p>
<h1>W3</h1>
<h2>41023106李凱新心得</h2>
<p>心得:一開始用倉儲時，沒有綁定github，所以沒辦法Acp。然後我們使用FORK，去問老師才知道，我把檔案抓到自己的倉儲，所以沒傳到靜態，<span>直接以 acp 進行 git add, commit 與 push，</span>後來我從新用一次就成功了。</p>
<h3>進度</h3>
<p><em><span>2023/3/8</span></em></p>
<p><em><span>bubbleRob目前用到感測器</span></em></p>
<p><em><span>2023/3/9</span></em></p>
<p><em><span>bubbleRob目前用到輪子和jiont</span></em></p>
<h2>41023103心得</h2>
<p>沒有clone到倉儲,token的網址沒有放入config</p>
<h2>HW</h2>
<p></p>
<!-- 導入 brython 程式庫 -->
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- 啟動 Brython -->
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><!-- 印出版次與關鍵字程式 --></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd(ev):
    bd = doc["brython_div"]
    bd.clear()
# Brython 3.3.4 內建的 container 名稱為  'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
       url ="https://gist.githubusercontent.com/41023125/a7f163847debb3c3741e5a7e98cfab17/raw/f932737a206f63e3b7bcfd4666a516fa4be72889/hw1"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace.editor.setValue(prog)
    Ace.editor.scrollToRow(0)
    Ace.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
doc['clear_bd'].bind('click', clear_bd)
# 呼叫函式執行
run()
</script>
</p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<!-- 存擋表單開始 --><form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src', 'kw_filename');" type="submit" value="Save"/></form><!-- 存擋表單結束 -->
<p></p>
<!-- 執行與清除按鈕開始 -->
<p><button id="kw_run">Run</button> <button id="kw_show_console">Output</button> <button id="kw_clear_console">清除輸出區</button><button id="clear_bd">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<!-- 執行與清除按鈕結束 -->
<p></p>
<!-- 程式執行 ouput 區 -->
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console"></textarea></div>
<!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 -->
<h1>pj1</h1><h1>tutorial1</h1>
<p></p>
<p><a href="/downloads/BubbleRub tutorial.pptx">/downloads/BubbleRub tutorial.pptx</a></p>
<p><a href="/downloads/bubbleBob.ttt">/downloads/bubbleBob.ttt</a></p>
<p><span style="background-color: #ffcc00;"><strong>心得</strong></span></p>
<p><strong>李凱新:<i>學習做</i><i>BubbleRob</i>的同時，學到相當多的 CoppeliaSim 功能。同時使用中文翻譯和英文的網頁來回地確認過程是否有誤，使用CoppeliaSim越來越上手。</strong></p>
<p><strong>江芷柔:做BubbleRob使用CoppeliaSim時，遇到了一些問題，會一直中英文切換，有的時候會在使用CoppeliaSim時，會找不到要用的東西在哪裡，或是像沒有把東西連接到要連接的東西。</strong></p>
<p><span style="background-color: #ffcc00;">到感測器</span></p>
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="winkVideoData_w2_1" height="600" muted="true" width="800"><source src="/downloads/1.mp4" type="video/mp4"/></video>
<p>李凱新:由於一開始時，不熟悉CoppeliaSimEdu的使用方法摸索了一陣子所以wink截圖的不夠完整，後來我一邊指導我的組員再做一次，同時他做了仔細版的wink。</p>
</div>
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="winkVideoData_w2_1" height="600" muted="true" width="800"><source src="/downloads/3.mp4" type="video/mp4"/></video></div>
<p>到感測器仔細版本</p>
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="winkVideoData_w2_1" height="600" muted="true" width="800">
<source src="/downloads/4.mp4" type="video/mp4"/></video> 
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="winkVideoData_w2_1" height="600" muted="true" width="800"><source src="/downloads/123.mp4" type="video/mp4"/></video>
<p></p>
<p><span style="background-color: #ffcc00;">動作</span></p>
</div>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/rrug8yE6VVA" title="YouTube video player" width="560"></iframe></p>
<p><span style="background-color: #33cccc;"><strong>遇到問題1</strong></span>沒有把conection拉進本體</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/HdGbqVGJWnw" title="YouTube video player" width="560"></iframe></p>
<p><span style="background-color: #33cccc;">遇到問題2</span>所有的物件必須使用實體</p>
<p><img alt="" height="401" src="/images/圖片1.png" width="807"/></p>
</div><h2>問題</h2>
<p>使用chatgpt</p>
<p>1.<span style="background-color: #ffcc00;"><strong>coppeliasim中的scene與model有何不同?</strong></span></p>
<p>Scene 代表整個模擬場景，包括模型、燈光、相機、物理引擎、碰撞檢測等元素，而且可以包含多個模型。在 CoppeliaSim 裡，你可以在 Scene 中建立不同的物體、場景、環境等元素，然後對它們進行編輯、設置、執行模擬等操作。</p>
<p>Model 則是指單個模型或物體，可以是機器人、車輛、感測器等。每個 Model 都有自己的屬性和行為，你可以對其進行建模、編程、測試等操作。在 CoppeliaSim 裡，你可以將多個 Model 加入到 Scene 中，然後進行整體模擬。</p>
<p>簡而言之，Scene 是整個模擬場景的容器，包含多個 Model；而 Model 是單獨的模型或物體，可以在 Scene 中被使用。</p>
<p><span style="color: #0000ff;">-&gt; Scene 代表整個模擬場景，Model 則是指單個模型或物體</span></p>
<p><span style="color: #0000ff;">在 CoppeliaSim 裡， Scene - 建立不同的物體、場景、環境等元素，然後對它們進行</span></p>
<p><span style="color: #0000ff;">編輯、設置、執行模擬等操作。</span></p>
<p><span style="color: #0000ff;">Model - 可以將多個 Model 加入到 Scene 中，然後進行整體模</span></p>
<p><span style="color: #0000ff;">擬。</span></p>
<p>2.<strong><span style="background-color: #ffcc00;">在CoppeliaSim scene中，何謂clean model?</span></strong></p>
<p>在 CoppeliaSim 的 Scene 中，Clean Model 是一個特殊的 Model，它被用來將 Scene 中的所有物體和模型全部清除，從而實現一個空白的場景。</p>
<p>當你創建一個新的 Scene 時，CoppeliaSim 會自動在 Scene 中添加一個 Clean Model，這樣你就可以通過刪除 Clean Model 來清空整個 Scene。你也可以通過右鍵單擊 Clean Model，然後選擇 Delete Object 來手動刪除它。</p>
<p>Clean Model 本身沒有實際的物理特性，它只是作為一個空白的模型來幫助你更方便地清空整個場景，以便開始進行新的模擬和測試。</p>
<p><img alt="" height="384" src="/images/螢幕擷取畫面 2023-03-19 181928.png" width="997"/></p>
<p><span style="color: #0000ff;">-&gt;Clean Model 是一個特殊的 Model，它被用來將 Scene 中的所有物體和模型全部清除，從而實現一個空白的場景。本身沒有實際的物理特性，它只是作為一個空白的模型來幫助你更方便地清空整個場景，以便開始進行新的模擬和測試。</span></p>
<p>3.<span style="background-color: #ffcc00;"><strong>如何在CoppeliaSim中，利用Lua以及Python建立primitive type object，並利用程式設定物件位置?</strong></span></p>
<div class="group w-full text-gray-800 dark:text-gray-100 border-b border-black/10 dark:border-gray-900/50 bg-gray-50 dark:bg-[#444654]">
<div class="text-base gap-4 md:gap-6 md:max-w-2xl lg:max-w-2xl xl:max-w-3xl p-4 md:py-6 flex lg:px-0 m-auto">
<div class="relative flex w-[calc(100%-50px)] flex-col gap-1 md:gap-3 lg:w-[calc(100%-115px)]">
<div class="flex flex-grow flex-col gap-3">
<div class="min-h-[20px] flex flex-col items-start gap-4 whitespace-pre-wrap">
<div class="markdown prose w-full break-words dark:prose-invert light">
<div class="bg-black rounded-md mb-4">
<div class="flex items-center relative text-gray-200 bg-gray-800 px-4 py-2 text-xs font-sans justify-between rounded-t-md">scss<button class="flex ml-auto gap-2"><svg class="h-4 w-4" fill="none" height="1em" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" viewbox="0 0 24 24" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path><rect height="4" rx="1" ry="1" width="8" x="8" y="2"></rect></svg>Copy code</button></div>
<div class="p-4 overflow-y-auto"><code class="!whitespace-pre hljs language-scss">handle = <span class="hljs-built_in">simCreatePureShape</span>(sim_shape_cube, <span class="hljs-number">16</span>, {<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>}, <span class="hljs-number">0.01</span>) <span class="hljs-built_in">simSetObjectPosition</span>(handle, -<span class="hljs-number">1</span>, {<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>}) </code></div>
</div>
<p>其中 sim_shape_cube 是立方體的 ID，16 是立方體的位姿關係參數，{0.5, 0.5, 0.5} 是立方體的大小，0.01 是立方體的質量。simSetObjectPosition 函數將物體放置在世界坐標系原點。</p>
<p>使用 Python 創建 primitive type object：</p>
<ol>
<li>在 CoppeliaSim 中，點擊 File -&gt; New Scene，創建一個新的場景。</li>
<li>在 Scene 中，點擊左側菜單的 Primitive Shapes 按鈕，選擇你想要的 primitive shape（如 Cube、Sphere、Cylinder 等）。</li>
<li>在 Scene 中點擊滑鼠右鍵，選擇 Add -&gt; Primitive shape，你會發現一個新的 primitive object 被添加到場景中。</li>
<li>在 Scene 中選擇這個 primitive object，點擊右側的 Property Editor 按鈕，你可以看到這個物體的所有屬性，例如位置、旋轉、大小等。<br/>在 Python script 中，使用 sim.simxCreatePureShape 函數創建 primitive object。例如，以下代碼創建一個 0.5 米大小的立方體並將其放置在世界坐標系原。</li>
<li>在 Python script 中，使用 sim.simxCreatePureShape 函數創建 primitive object。例如，以下代碼創建一個 0.5 米大小的立方體並將其放置在世界坐標系原。
<p><span style="color: #3366ff;">-&gt; 使用 Lua 或 Python 語言來建立 primitive type object，並利用程式設定物件位置。</span></p>
<p><span style="color: #3366ff;"></span></p>
<p><span style="color: #3366ff;">     Lua 是一種輕量級、高效、可擴展的腳本語言。</span></p>
<p><span style="color: #3366ff;"><span>     Python是一種廣泛使用的直譯式、進階和通用的程式語言。</span></span><br/>4.<span style="background-color: #ffcc00;"><strong>CoppeliaSim.ttt檔案格式與.simscene.xml檔案格式有何不同?</strong></span></p>
<p>CoppeliaSim 的 .ttt 檔案格式和 .simscene.xml 檔案格式都是用來保存 CoppeliaSim 场景的文件格式，但是它們的文件結構和格式是不同的。</p>
<p>.ttt 檔案是 CoppeliaSim 的二進制文件格式，可以保存整個場景，包括場景中的物體、模型、腳本、參數等。它是 CoppeliaSim 的原生文件格式，可以被 CoppeliaSim 直接讀取和寫入。因為是二進制格式，所以 .ttt 檔案比 .simscene.xml 檔案更小，而且讀取速度更快。</p>
<p>另一方面，.simscene.xml 檔案是一個基於 XML 格式的文本文件，可以保存場景中的所有數據，但是不包括圖形資源。它是一種通用的格式，可以用於不同的應用程序和平台。因為是文本格式，所以 .simscene.xml 檔案易於讀取和編輯，但是文件大小比 .ttt 檔案要大，讀取速度也較慢。</p>
<p>總的來說，.ttt 檔案格式和 .simscene.xml 檔案格式都可以用於保存 CoppeliaSim 场景，但是它們各有優缺點，需要根據具體情況來選擇使用哪一種格式。如果要保存的是 CoppeliaSim 场景本身，最好使用 .ttt 格式。如果要將 CoppeliaSim 场景集成到其他應用程序或系統中，最好使用 .simscene.xml 格式。</p>
<p><span style="color: #0000ff;">-&gt;CoppeliaSim 的 .ttt 和 .simscene.xml 的文件結構和格式是不同的。</span></p>
<p><span style="color: #0000ff;">.ttt 檔案-可以保存整個場景，檔案更小，讀取速度更快。</span></p>
<p><span style="color: #0000ff;">.simscene.xml 檔案-可以保存場景中的所有數據，但是不包括圖形資源。</span></p>
<br/><br/><span style="color: #33cccc;"></span></li>
</ol>
</div>
</div>
</div>
</div>
</div>
</div><h1>專題規劃</h1>
<div class="page-header">
<p>規劃專案的12個步驟<br/>如果我們有好多好多的事情要做，誰不愛擁有一個清單？告訴自己該做什麼，並且詳細的條列出來，下次只要依循這些清單上面的步驟，我們就可以完成一個專案，又不用害怕遺漏甚麼東西，那該有多好呢？當然身為負責這個專案的你，以下步驟可以幫助你更輕鬆有效的規劃專案。</p>
<p>1.定義範疇<br/>這是一個規劃專案的重要第一步，此專案要做甚麼、包含的範圍有多廣，必須在何時完成，你必須把這個大餅畫出來再做細分，才能夠掌握此專案的正確方向。</p>
<p></p>
<p>2.確定您的專案發起人<br/>每一個專案都會有一個發起人或利益相關者，找出這些人都是誰。</p>
<p></p>
<p>他們必定會對此專案有一定的影響力，以確保該專案向前推進時，該找誰來溝通，並且一同策劃專案的方向，有了這個專案發起人，可以讓專案經理更輕鬆的管理專案。</p>
<p></p>
<p>3.確定可用資源<br/>當你在定義範疇的時候，你就必須清楚你需要多少的資源才得以完成此專案，他們是技術性質的嗎？他們需要一個特殊的技能或培訓嗎？他們是已經在公司裡面嗎？或他們需要被聘用或簽約。</p>
<p>專案開始之前，你必須把資源分配好。</p>
<p></p>
<p>4.檢查時程<br/>專案規劃最重要的部分就是專案時程，你必須要了解你有多少的事情要做，搭配上你的資源必須花費多少的時間，雖然我們的時間總是在變，我們有許多無法控制的因子，沒有辦法確定正確的時間，但是如果有一個完美的甘特圖，可以讓你更能夠掌握專案的進度。</p>
<p></p>
<p>5.建立WBS<br/>將你的專案展開，越小的事越容易完成，所以把WBS展開的仔細點，會更有幫助。許多人都會選擇用心智圖的方式，能夠簡單明瞭的看到所有的任務項目，讓你在報告的時候也可以有漂亮且專業的圖來呈現。</p>
<p></p>
<p>6.切分成小步驟<br/>如果接到手上的是一個很大的專案，你可能不知道該從何處下手，如果你把專案切得越細，你就可以更清楚，你所需要的資源和時間，也更能夠做細部的掌控，所以只要有一個好的觀念，相信再大的專案也難不倒你。</p>
<p></p>
<p>7.制定一個計劃草案<br/>當你正在做一個專案時，你必須清楚到成本、時間、資源，大致上需要做些什麼。你可以把這些擬定成一個計畫草案，這是你第一次把所有的東西都整合在一起，也有可能會寫上專案開始的時間以及預計完成的時間，讓你的團隊們能夠知道整個計畫的概要。</p>
<p></p>
<p>8.草案檢討與反饋<br/>當你完成了第七步驟的草案後，你就可以發佈給團隊成員們，大家找個時間做個會議，在會議當中，團隊成員們可以對草案提出反饋，在這樣的溝通與互動過程中，能夠將專案計畫導到更接近完美的專案計畫。</p>
<p></p>
<p>9.完成精確計畫<br/>現在該計劃正在向前推進，透過反饋與檢討讓專案計畫逼近完美了，現在就開始把這些資訊整理、討論該如何去做執行，讓這個專案開始啟動吧！</p>
<p></p>
<p>10.監測進展情況<br/>開始做執行的階段，你必須不斷監測也許是每一周或是每一天，你必須要好好的規劃，在執行的過程中，難免會出現一些意料之外的事情，所以你必須要趕緊處理，也許是停止或者找解決的方法。</p>
<p>身為一個專案經理人，在這個時候是非常重要的，如果搭配一個好的專案軟體，會讓你的專案更加順利。</p>
<p></p>
<p>11.保留所有文件<br/>在執行一個專案時，我們無法確保此專案會一直照著我們的規劃走，如果有些突發狀況，雖然不是我們預期的，但我們還是要把他記錄下來，這樣的專案紀錄可以讓整個專案更逼近寫實，也可以讓之後的成員們，有一些資料能夠參考與學習。</p>
<p></p>
<p>12.專案結束仍要保持聯繫<br/>最後，你已經完成專案了，但是你不能確保此專案之後不會有任何問題，有些地方還是需要專家的幫忙，如果你的技術部門是外包的，那你就必須要隨時與你的外包商聯繫，如果哪一天突然發生突發狀況，你才不會找不到人來幫你處理，隨時關心團隊成員，也可以建立良好的人脈關係唷！</p>
<p></p></div>