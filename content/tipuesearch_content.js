var tipuesearch = {"pages": [{'title': 'About', 'text': '倉儲: https://github.com/mdecd2023/2a-pj1ag7 \n 網頁:  https://mdecd2023.github.io/2a-pj1ag7/ \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'W3', 'text': '', 'tags': '', 'url': 'W3.html'}, {'title': '41023106李凱新心得', 'text': '心得:一開始用倉儲時，沒有綁定github，所以沒辦法Acp。然後我們使用FORK，去問老師才知道，我把檔案抓到自己的倉儲，所以沒傳到靜態， 直接以 acp 進行 git add, commit 與 push， 後來我從新用一次就成功了。 \n', 'tags': '', 'url': '41023106李凱新心得.html'}, {'title': '進度', 'text': '2023/3/8 \n bubbleRob目前用到感測器 \n 2023/3/9 \n bubbleRob目前用到輪子和jiont \n', 'tags': '', 'url': '進度.html'}, {'title': '41023103心得', 'text': '沒有clone到倉儲,token的網址沒有放入config \n', 'tags': '', 'url': '41023103心得.html'}, {'title': 'HW', 'text': '\n  導入 brython 程式庫  \n \n \n  啟動 Brython  \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  印出版次與關鍵字程式  \n \n \n \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  Filename:  .py    存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div 作為切入位置  \n', 'tags': '', 'url': 'HW.html'}, {'title': 'tutorial1', 'text': '\n /downloads/BubbleRub tutorial.pptx \n /downloads/bubbleBob.ttt \n 心得 \n 李凱新: 學習做 BubbleRob 的同時，學到相當多的 CoppeliaSim 功能。同時使用中文翻譯和英文的網頁來回地確認過程是否有誤，使用CoppeliaSim越來越上手。 \n 江芷柔:做BubbleRob使用CoppeliaSim時，遇到了一些問題，會一直中英文切換，有的時候會在使用CoppeliaSim時，會找不到要用的東西在哪裡，或是像沒有把東西連接到要連接的東西。 \n 到感測器 \n \n 李凱新:由於一開始時，不熟悉CoppeliaSimEdu的使用方法摸索了一陣子所以wink截圖的不夠完整，後來我一邊指導我的組員再做一次，同時他做了仔細版的wink。 \n \n \n 到感測器仔細版本 \n \n \xa0\n \n \n 動作 \n \n \n 遇到問題沒有把conection拉進本體 \n \n 遇到問題所有的物件必須使用實體 \n \n', 'tags': '', 'url': 'tutorial1.html'}, {'title': '問題', 'text': '使用chatgpt \n 1. coppeliasim中的scene與model有何不同? \n Scene 代表整個模擬場景，包括模型、燈光、相機、物理引擎、碰撞檢測等元素，而且可以包含多個模型。在 CoppeliaSim 裡，你可以在 Scene 中建立不同的物體、場景、環境等元素，然後對它們進行編輯、設置、執行模擬等操作。 \n Model 則是指單個模型或物體，可以是機器人、車輛、感測器等。每個 Model 都有自己的屬性和行為，你可以對其進行建模、編程、測試等操作。在 CoppeliaSim 裡，你可以將多個 Model 加入到 Scene 中，然後進行整體模擬。 \n 簡而言之，Scene 是整個模擬場景的容器，包含 多個 Model ；而 Model 是 單獨的模型或物體 ，可以在 Scene 中被使用。 \n ->\xa0Scene 代表整個模擬場景，Model 則是指單個模型或物體 \n \xa0 \xa0 \xa0在 CoppeliaSim 裡，\xa0Scene - 建立不同的物體、場景、環境等元素，然後對它們進行 \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 編輯、設置、執行模擬等操作。 \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 Model\xa0-\xa0可以將多個 Model 加入到 Scene 中，然後進行整體模 \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 擬。 \n 2. 在CoppeliaSim scene中，何謂clean model? \n 在 CoppeliaSim 的 Scene 中，Clean Model 是一個特殊的 Model，它被用來將 Scene 中的所有物體和模型全部清除，從而實現一個空白的場景。 \n 當你創建一個新的 Scene 時，CoppeliaSim 會自動在 Scene 中添加一個 Clean Model，這樣你就可以通過刪除 Clean Model 來清空整個 Scene。你也可以通過右鍵單擊 Clean Model，然後選擇 Delete Object 來手動刪除它。 \n Clean Model 本身沒有實際的物理特性，它只是作為一個空白的模型來幫助你更方便地清空整個場景，以便開始進行新的模擬和測試。 \n ->Clean Model 是一個特殊的 Model，它被用來將 Scene 中的所有物體和模型全部清除，從而實現一個空白的場景。本身沒有實際的物理特性，它只是作為一個空白的模型來幫助你更方便地清空整個場景，以便開始進行新的模擬和測試。 \n 3. 如何在CoppeliaSim中，利用Lua以及Python建立primitive type object，並利用程式設定物件位置? \n \n \n \n \n \n \n 在 CoppeliaSim 中，你可以使用 Lua 或 Python 語言來建立 primitive type object，並利用程式設定物件位置。以下是使用 Lua 和 Python 創建 primitive type object 的基本步驟： \n 使用 Lua 創建 primitive type object： \n \n 打開 CoppeliaSim，點擊 File -> New Scene，創建一個新的場景。 \n 在 Scene 中，點擊左側菜單的 Primitive Shapes 按鈕，選擇你想要的 primitive shape（如 Cube、Sphere、Cylinder 等）。 \n 在 Scene 中點擊滑鼠右鍵，選擇 Add -> Primitive shape，你會發現一個新的 primitive object 被添加到場景中。 \n 在 Scene 中選擇這個 primitive object，點擊右側的 Property Editor 按鈕，你可以看到這個物體的所有屬性，例如位置、旋轉、大小等。 \n 在 Lua script 中，使用 simCreatePureShape 函數創建 primitive object。例如，以下代碼創建一個 0.5 米大小的立方體並將其放置在世界坐標系原點： \n \n \n scss Copy code \n handle =  simCreatePureShape (sim_shape_cube,  16 , { 0.5 ,  0.5 ,  0.5 },  0.01 )  simSetObjectPosition (handle, - 1 , { 0 ,  0 ,  0 })  \n \n 其中 sim_shape_cube 是立方體的 ID，16 是立方體的位姿關係參數，{0.5, 0.5, 0.5} 是立方體的大小，0.01 是立方體的質量。simSetObjectPosition 函數將物體放置在世界坐標系原點。 \n 使用 Python 創建 primitive type object： \n \n \n 在 CoppeliaSim 中，點擊 File -> New Scene，創建一個新的場景。 \n 在 Scene 中，點擊左側菜單的 Primitive Shapes 按鈕，選擇你想要的 primitive shape（如 Cube、Sphere、Cylinder 等）。 \n 在 Scene 中點擊滑鼠右鍵，選擇 Add -> Primitive shape，你會發現一個新的 primitive object 被添加到場景中。 \n 在 Scene 中選擇這個 primitive object，點擊右側的 Property Editor 按鈕，你可以看到這個物體的所有屬性，例如位置、旋轉、大小等。 \n 在 Python script 中，使用 sim.simxCreatePureShape 函數創建 primitive object。例如，以下代碼創建一個 0.5 米大小的立方體並將其放置在世界坐標系原。 \n \n ->使用 Lua 或 Python 語言來建立 primitive type object，並利用程式設定物件位置。 \n 4.CoppeliaSim.ttt檔案格式與.simscene.xml檔案格式有何不同? \n CoppeliaSim 的 .ttt 檔案格式和 .simscene.xml 檔案格式都是用來保存 CoppeliaSim 场景的文件格式，但是它們的文件結構和格式是不同的。 \n .ttt 檔案是 CoppeliaSim 的二進制文件格式，可以保存整個場景，包括場景中的物體、模型、腳本、參數等。它是 CoppeliaSim 的原生文件格式，可以被 CoppeliaSim 直接讀取和寫入。因為是二進制格式，所以 .ttt 檔案比 .simscene.xml 檔案更小，而且讀取速度更快。 \n 另一方面，.simscene.xml 檔案是一個基於 XML 格式的文本文件，可以保存場景中的所有數據，但是不包括圖形資源。它是一種通用的格式，可以用於不同的應用程序和平台。因為是文本格式，所以 .simscene.xml 檔案易於讀取和編輯，但是文件大小比 .ttt 檔案要大，讀取速度也較慢。 \n 總的來說，.ttt 檔案格式和 .simscene.xml 檔案格式都可以用於保存 CoppeliaSim 场景，但是它們各有優缺點，需要根據具體情況來選擇使用哪一種格式。如果要保存的是 CoppeliaSim 场景本身，最好使用 .ttt 格式。如果要將 CoppeliaSim 场景集成到其他應用程序或系統中，最好使用 .simscene.xml 格式。 \n ->CoppeliaSim 的 .ttt 和 .simscene.xml\xa0的文件結構和格式是不同的。 \n \xa0 \xa0.ttt 檔案-可以保存整個場景，檔案更小，讀取速度更快。 \n \xa0 \xa0.simscene.xml 檔案-可以保存場景中的所有數據，但是不包括圖形資源。 \n \xa0 \xa0 \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': '問題.html'}]};